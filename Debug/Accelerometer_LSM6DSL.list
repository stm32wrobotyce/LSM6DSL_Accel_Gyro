
Accelerometer_LSM6DSL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fec  08003fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ff4  08003ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08004008  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000138  08004008  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d268  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002462  00000000  00000000  0002d2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0002f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000303c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027126  00000000  00000000  00030f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010311  00000000  00000000  00058096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2b8  00000000  00000000  000683a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015365f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000329c  00000000  00000000  001536b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f8c 	.word	0x08003f8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f8c 	.word	0x08003f8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <MX_CRC_Init+0x3c>)
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <MX_CRC_Init+0x40>)
 80004d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_CRC_Init+0x3c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MX_CRC_Init+0x3c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_CRC_Init+0x3c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <MX_CRC_Init+0x3c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_CRC_Init+0x3c>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <MX_CRC_Init+0x3c>)
 80004f6:	f000 fd5f 	bl	8000fb8 <HAL_CRC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000500:	f000 faa3 	bl	8000a4a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000028 	.word	0x20000028
 800050c:	40023000 	.word	0x40023000

08000510 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <HAL_CRC_MspInit+0x38>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d10b      	bne.n	800053a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_CRC_MspInit+0x3c>)
 8000524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_CRC_MspInit+0x3c>)
 8000528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052c:	6493      	str	r3, [r2, #72]	; 0x48
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_CRC_MspInit+0x3c>)
 8000530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023000 	.word	0x40023000
 800054c:	40021000 	.word	0x40021000

08000550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <MX_GPIO_Init+0xd4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <MX_GPIO_Init+0xd4>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <MX_GPIO_Init+0xd4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_GPIO_Init+0xd4>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a28      	ldr	r2, [pc, #160]	; (8000624 <MX_GPIO_Init+0xd4>)
 8000584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_GPIO_Init+0xd4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_GPIO_Init+0xd4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a22      	ldr	r2, [pc, #136]	; (8000624 <MX_GPIO_Init+0xd4>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <MX_GPIO_Init+0xd4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_GPIO_Init+0xd4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <MX_GPIO_Init+0xd4>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_GPIO_Init+0xd4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2120      	movs	r1, #32
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f000 ff87 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_GPIO_Init+0xd8>)
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <MX_GPIO_Init+0xdc>)
 80005e8:	f000 fdd0 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ec:	2320      	movs	r3, #32
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f000 fdc1 	bl	800118c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f000 fc9b 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000614:	2028      	movs	r0, #40	; 0x28
 8000616:	f000 fcb4 	bl	8000f82 <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	10210000 	.word	0x10210000
 800062c:	48000800 	.word	0x48000800

08000630 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <MX_I2C1_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_I2C1_Init+0x74>)
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <MX_I2C1_Init+0x7c>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000648:	2201      	movs	r2, #1
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x74>)
 800066c:	f000 ff73 	bl	8001556 <HAL_I2C_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000676:	f000 f9e8 	bl	8000a4a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067a:	2100      	movs	r1, #0
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x74>)
 800067e:	f001 fc43 	bl	8001f08 <HAL_I2CEx_ConfigAnalogFilter>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000688:	f000 f9df 	bl	8000a4a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800068c:	2100      	movs	r1, #0
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000690:	f001 fc85 	bl	8001f9e <HAL_I2CEx_ConfigDigitalFilter>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 f9d6 	bl	8000a4a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000004c 	.word	0x2000004c
 80006a8:	40005400 	.word	0x40005400
 80006ac:	10909cec 	.word	0x10909cec

080006b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a17      	ldr	r2, [pc, #92]	; (800072c <HAL_I2C_MspInit+0x7c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d128      	bne.n	8000724 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_I2C_MspInit+0x80>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <HAL_I2C_MspInit+0x80>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_I2C_MspInit+0x80>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f0:	2312      	movs	r3, #18
 80006f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006fc:	2304      	movs	r3, #4
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <HAL_I2C_MspInit+0x84>)
 8000708:	f000 fd40 	bl	800118c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_I2C_MspInit+0x80>)
 800070e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_I2C_MspInit+0x80>)
 8000712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000716:	6593      	str	r3, [r2, #88]	; 0x58
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_I2C_MspInit+0x80>)
 800071a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40005400 	.word	0x40005400
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <lsm6dsl_init>:
#define LSM6DSL_SET_FS_G(data)		(data << 1)

#define LSM6DSL_SET_AUTO_INC		(1 << 2)

void lsm6dsl_init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]

	lsm6dsl_read(LSM6DSL_WHO_AM_I, &data, 1);
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	2201      	movs	r2, #1
 8000746:	4619      	mov	r1, r3
 8000748:	200f      	movs	r0, #15
 800074a:	f000 f8c1 	bl	80008d0 <lsm6dsl_read>

	if(LSM6DSL_ID != data)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b6a      	cmp	r3, #106	; 0x6a
 8000752:	d118      	bne.n	8000786 <lsm6dsl_init+0x4e>
	{
		return;
	}

	data = LSM6DSL_SET_ODR_XL(LSM6DSL_XL_ODR_208Hz) | LSM6DSL_SET_FS_XL(LSM6DSL_2g);
 8000754:	2350      	movs	r3, #80	; 0x50
 8000756:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_write(LSM6DSL_CTRL1_XL, &data, 1);
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	2010      	movs	r0, #16
 8000760:	f000 f89a 	bl	8000898 <lsm6dsl_write>

	data = LSM6DSL_SET_ODR_G(LSM6DSL_GY_ODR_208Hz) | LSM6DSL_SET_FS_G(LSM6DSL_125dps);
 8000764:	2352      	movs	r3, #82	; 0x52
 8000766:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_write(LSM6DSL_CTRL2_G, &data, 1);
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	2011      	movs	r0, #17
 8000770:	f000 f892 	bl	8000898 <lsm6dsl_write>

	data = LSM6DSL_SET_AUTO_INC;
 8000774:	2304      	movs	r3, #4
 8000776:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_write(LSM6DSL_CTRL3_C, &data, 1);
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	2012      	movs	r0, #18
 8000780:	f000 f88a 	bl	8000898 <lsm6dsl_write>
 8000784:	e000      	b.n	8000788 <lsm6dsl_init+0x50>
		return;
 8000786:	bf00      	nop
}
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <lsm6dsl_get_accel_axis>:

void lsm6dsl_get_accel_axis(LSM6DSL_Axes_t *axes)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	LSM6DSL_AxesRaw_t axes_raw;

	lsm6dsl_read(LSM6DSL_OUTX_L_XL, axes_raw.bytes, LSM6DSL_ACCE_DATA_SIZE);
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2206      	movs	r2, #6
 800079e:	4619      	mov	r1, r3
 80007a0:	2028      	movs	r0, #40	; 0x28
 80007a2:	f000 f895 	bl	80008d0 <lsm6dsl_read>

	axes->x = (int32_t)((float)axes_raw.x * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80007a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007b2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000810 <lsm6dsl_get_accel_axis+0x80>
 80007b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007be:	ee17 2a90 	vmov	r2, s15
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80007c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007ca:	ee07 3a90 	vmov	s15, r3
 80007ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000810 <lsm6dsl_get_accel_axis+0x80>
 80007d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007de:	ee17 2a90 	vmov	r2, s15
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	605a      	str	r2, [r3, #4]
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80007e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000810 <lsm6dsl_get_accel_axis+0x80>
 80007f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007fe:	ee17 2a90 	vmov	r2, s15
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	609a      	str	r2, [r3, #8]
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	3d79db23 	.word	0x3d79db23

08000814 <lsm6dsl_get_gyro_axis>:

void lsm6dsl_get_gyro_axis(LSM6DSL_Axes_t *axes)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	LSM6DSL_AxesRaw_t axes_raw;

	lsm6dsl_read(LSM6DSL_OUTX_L_G, axes_raw.bytes, LSM6DSL_GYRO_DATA_SIZE);
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2206      	movs	r2, #6
 8000822:	4619      	mov	r1, r3
 8000824:	2022      	movs	r0, #34	; 0x22
 8000826:	f000 f853 	bl	80008d0 <lsm6dsl_read>

	axes->x = (int32_t)((float)axes_raw.x * LSM6DSL_GYRO_SENSITIVITY_FS_125DPS);
 800082a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800082e:	ee07 3a90 	vmov	s15, r3
 8000832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000836:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000894 <lsm6dsl_get_gyro_axis+0x80>
 800083a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800083e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000842:	ee17 2a90 	vmov	r2, s15
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_GYRO_SENSITIVITY_FS_125DPS);
 800084a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800084e:	ee07 3a90 	vmov	s15, r3
 8000852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000856:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000894 <lsm6dsl_get_gyro_axis+0x80>
 800085a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800085e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000862:	ee17 2a90 	vmov	r2, s15
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	605a      	str	r2, [r3, #4]
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_GYRO_SENSITIVITY_FS_125DPS);
 800086a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800086e:	ee07 3a90 	vmov	s15, r3
 8000872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000876:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000894 <lsm6dsl_get_gyro_axis+0x80>
 800087a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800087e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000882:	ee17 2a90 	vmov	r2, s15
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	609a      	str	r2, [r3, #8]
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	408c0000 	.word	0x408c0000

08000898 <lsm6dsl_write>:

void lsm6dsl_write(uint8_t reg, uint8_t *data, uint32_t size)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af04      	add	r7, sp, #16
 800089e:	4603      	mov	r3, r0
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C_INTERFACE, LSM6DSL_I2C_ADDR, reg, 1, data, size, I2C_TIMEOUT);
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	2101      	movs	r1, #1
 80008b0:	9102      	str	r1, [sp, #8]
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	21d6      	movs	r1, #214	; 0xd6
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <lsm6dsl_write+0x34>)
 80008be:	f000 fed9 	bl	8001674 <HAL_I2C_Mem_Write>
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000004c 	.word	0x2000004c

080008d0 <lsm6dsl_read>:

void lsm6dsl_read(uint8_t reg, uint8_t *data, uint32_t size)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af04      	add	r7, sp, #16
 80008d6:	4603      	mov	r3, r0
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(I2C_INTERFACE, LSM6DSL_I2C_ADDR, reg, 1, data, size, I2C_TIMEOUT);
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	2101      	movs	r1, #1
 80008e8:	9102      	str	r1, [sp, #8]
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2301      	movs	r3, #1
 80008f2:	21d6      	movs	r1, #214	; 0xd6
 80008f4:	4803      	ldr	r0, [pc, #12]	; (8000904 <lsm6dsl_read+0x34>)
 80008f6:	f000 ffd1 	bl	800189c <HAL_I2C_Mem_Read>
}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000004c 	.word	0x2000004c

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090e:	f000 f9c5 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000912:	f000 f823 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000916:	f7ff fe1b 	bl	8000550 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800091a:	f000 f923 	bl	8000b64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800091e:	f7ff fe87 	bl	8000630 <MX_I2C1_Init>
  MX_CRC_Init();
 8000922:	f7ff fdd3 	bl	80004cc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  lsm6dsl_init();
 8000926:	f7ff ff07 	bl	8000738 <lsm6dsl_init>

  uint32_t time_ms = HAL_GetTick();
 800092a:	f000 fa27 	bl	8000d7c <HAL_GetTick>
 800092e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if((HAL_GetTick() - time_ms) > 10)
 8000930:	f000 fa24 	bl	8000d7c <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b0a      	cmp	r3, #10
 800093c:	d9f8      	bls.n	8000930 <main+0x28>
		{
			time_ms = HAL_GetTick();
 800093e:	f000 fa1d 	bl	8000d7c <HAL_GetTick>
 8000942:	6078      	str	r0, [r7, #4]
			lsm6dsl_get_accel_axis(&accel_axes);
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <main+0x4c>)
 8000946:	f7ff ff23 	bl	8000790 <lsm6dsl_get_accel_axis>
			lsm6dsl_get_gyro_axis(&gyro_axes);
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <main+0x50>)
 800094c:	f7ff ff62 	bl	8000814 <lsm6dsl_get_gyro_axis>
		if((HAL_GetTick() - time_ms) > 10)
 8000950:	e7ee      	b.n	8000930 <main+0x28>
 8000952:	bf00      	nop
 8000954:	20000098 	.word	0x20000098
 8000958:	200000a4 	.word	0x200000a4

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0b8      	sub	sp, #224	; 0xe0
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000966:	2244      	movs	r2, #68	; 0x44
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fb06 	bl	8003f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2288      	movs	r2, #136	; 0x88
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f003 faf8 	bl	8003f7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098c:	2302      	movs	r3, #2
 800098e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099a:	2310      	movs	r3, #16
 800099c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a6:	2302      	movs	r3, #2
 80009a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009b2:	230a      	movs	r3, #10
 80009b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009b8:	2307      	movs	r3, #7
 80009ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fb96 	bl	8002100 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009da:	f000 f836 	bl	8000a4a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	2303      	movs	r3, #3
 80009e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a00:	2104      	movs	r1, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 ff64 	bl	80028d0 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a0e:	f000 f81c 	bl	8000a4a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000a12:	2342      	movs	r3, #66	; 0x42
 8000a14:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 f95b 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a2c:	f000 f80d 	bl	8000a4a <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a34:	f001 fb0e 	bl	8002054 <HAL_PWREx_ControlVoltageScaling>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a3e:	f000 f804 	bl	8000a4a <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	37e0      	adds	r7, #224	; 0xe0
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4e:	b672      	cpsid	i
}
 8000a50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <Error_Handler+0x8>

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6613      	str	r3, [r2, #96]	; 0x60
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f934 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000af4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000af8:	f000 fd0a 	bl	8001510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <SystemInit+0x5c>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <SystemInit+0x5c>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <SystemInit+0x60>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <SystemInit+0x60>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <SystemInit+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <SystemInit+0x60>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <SystemInit+0x60>)
 8000b2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <SystemInit+0x60>)
 8000b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <SystemInit+0x60>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <SystemInit+0x60>)
 8000b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SystemInit+0x60>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00
 8000b60:	40021000 	.word	0x40021000

08000b64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <MX_USART2_UART_Init+0x5c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000ba8:	f002 fd54 	bl	8003654 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f7ff ff4a 	bl	8000a4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000b0 	.word	0x200000b0
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_UART_MspInit+0x7c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d128      	bne.n	8000c38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0x80>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <HAL_UART_MspInit+0x80>)
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_UART_MspInit+0x80>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_UART_MspInit+0x80>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_UART_MspInit+0x80>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_UART_MspInit+0x80>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c16:	230c      	movs	r3, #12
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c26:	2307      	movs	r3, #7
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f000 faaa 	bl	800118c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40004400 	.word	0x40004400
 8000c44:	40021000 	.word	0x40021000

08000c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c4c:	f7ff ff58 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c52:	e003      	b.n	8000c5c <LoopCopyDataInit>

08000c54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c5a:	3104      	adds	r1, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c5c:	480a      	ldr	r0, [pc, #40]	; (8000c88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c64:	d3f6      	bcc.n	8000c54 <CopyDataInit>
	ldr	r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c68:	e002      	b.n	8000c70 <LoopFillZerobss>

08000c6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c6c:	f842 3b04 	str.w	r3, [r2], #4

08000c70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <LoopForever+0x16>)
	cmp	r2, r3
 8000c72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c74:	d3f9      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c76:	f003 f95d 	bl	8003f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7a:	f7ff fe45 	bl	8000908 <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c84:	08003ffc 	.word	0x08003ffc
	ldr	r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c8c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c90:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c94:	20000138 	.word	0x20000138

08000c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_2_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_Init+0x3c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <HAL_Init+0x3c>)
 8000cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f93e 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 f80f 	bl	8000cdc <HAL_InitTick>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	e001      	b.n	8000cce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cca:	f7ff fec3 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cce:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d023      	beq.n	8000d38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_InitTick+0x70>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f949 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10f      	bne.n	8000d32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d809      	bhi.n	8000d2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 f913 	bl	8000f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_InitTick+0x74>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e004      	b.n	8000d3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e001      	b.n	8000d3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000134 	.word	0x20000134

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000134 	.word	0x20000134

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f7ff ff8e 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff29 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff3e 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff8e 	bl	8000e88 <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5d 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff31 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffa2 	bl	8000ef0 <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e054      	b.n	8001074 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7f5b      	ldrb	r3, [r3, #29]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d105      	bne.n	8000fe0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fa98 	bl	8000510 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a22      	ldr	r2, [pc, #136]	; (800107c <HAL_CRC_Init+0xc4>)
 8000ff4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0218 	bic.w	r2, r2, #24
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	e00c      	b.n	8001022 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6899      	ldr	r1, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	461a      	mov	r2, r3
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f834 	bl	8001080 <HAL_CRCEx_Polynomial_Set>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e028      	b.n	8001074 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	795b      	ldrb	r3, [r3, #5]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f04f 32ff 	mov.w	r2, #4294967295
 8001032:	611a      	str	r2, [r3, #16]
 8001034:	e004      	b.n	8001040 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6912      	ldr	r2, [r2, #16]
 800103e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695a      	ldr	r2, [r3, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699a      	ldr	r2, [r3, #24]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	04c11db7 	.word	0x04c11db7

08001080 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001090:	231f      	movs	r3, #31
 8001092:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001094:	bf00      	nop
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1e5a      	subs	r2, r3, #1
 800109a:	613a      	str	r2, [r7, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d009      	beq.n	80010b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b18      	cmp	r3, #24
 80010b8:	d846      	bhi.n	8001148 <HAL_CRCEx_Polynomial_Set+0xc8>
 80010ba:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	0800114f 	.word	0x0800114f
 80010c4:	08001149 	.word	0x08001149
 80010c8:	08001149 	.word	0x08001149
 80010cc:	08001149 	.word	0x08001149
 80010d0:	08001149 	.word	0x08001149
 80010d4:	08001149 	.word	0x08001149
 80010d8:	08001149 	.word	0x08001149
 80010dc:	08001149 	.word	0x08001149
 80010e0:	0800113d 	.word	0x0800113d
 80010e4:	08001149 	.word	0x08001149
 80010e8:	08001149 	.word	0x08001149
 80010ec:	08001149 	.word	0x08001149
 80010f0:	08001149 	.word	0x08001149
 80010f4:	08001149 	.word	0x08001149
 80010f8:	08001149 	.word	0x08001149
 80010fc:	08001149 	.word	0x08001149
 8001100:	08001131 	.word	0x08001131
 8001104:	08001149 	.word	0x08001149
 8001108:	08001149 	.word	0x08001149
 800110c:	08001149 	.word	0x08001149
 8001110:	08001149 	.word	0x08001149
 8001114:	08001149 	.word	0x08001149
 8001118:	08001149 	.word	0x08001149
 800111c:	08001149 	.word	0x08001149
 8001120:	08001125 	.word	0x08001125
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b06      	cmp	r3, #6
 8001128:	d913      	bls.n	8001152 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800112e:	e010      	b.n	8001152 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b07      	cmp	r3, #7
 8001134:	d90f      	bls.n	8001156 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800113a:	e00c      	b.n	8001156 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	d90b      	bls.n	800115a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001146:	e008      	b.n	800115a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	75fb      	strb	r3, [r7, #23]
      break;
 800114c:	e006      	b.n	800115c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800114e:	bf00      	nop
 8001150:	e004      	b.n	800115c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001152:	bf00      	nop
 8001154:	e002      	b.n	800115c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800115a:	bf00      	nop
  }
  if (status == HAL_OK)
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10d      	bne.n	800117e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f023 0118 	bic.w	r1, r3, #24
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	430a      	orrs	r2, r1
 800117c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800117e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001180:	4618      	mov	r0, r3
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119a:	e17f      	b.n	800149c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8171 	beq.w	8001496 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d00b      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d007      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c8:	2b11      	cmp	r3, #17
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b12      	cmp	r3, #18
 80011d2:	d130      	bne.n	8001236 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120a:	2201      	movs	r2, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	f003 0201 	and.w	r2, r3, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b03      	cmp	r3, #3
 8001240:	d118      	bne.n	8001274 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001248:	2201      	movs	r2, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	08db      	lsrs	r3, r3, #3
 800125e:	f003 0201 	and.w	r2, r3, #1
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x128>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d123      	bne.n	80012fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	6939      	ldr	r1, [r7, #16]
 80012f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0203 	and.w	r2, r3, #3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80ac 	beq.w	8001496 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a5e      	ldr	r2, [pc, #376]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <HAL_GPIO_Init+0x330>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001356:	4a5a      	ldr	r2, [pc, #360]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001380:	d025      	beq.n	80013ce <HAL_GPIO_Init+0x242>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4f      	ldr	r2, [pc, #316]	; (80014c4 <HAL_GPIO_Init+0x338>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01f      	beq.n	80013ca <HAL_GPIO_Init+0x23e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <HAL_GPIO_Init+0x33c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0x23a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4d      	ldr	r2, [pc, #308]	; (80014cc <HAL_GPIO_Init+0x340>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x236>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <HAL_GPIO_Init+0x344>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x232>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <HAL_GPIO_Init+0x348>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x22e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <HAL_GPIO_Init+0x34c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x22a>
 80013b2:	2306      	movs	r3, #6
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x244>
 80013b6:	2307      	movs	r3, #7
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x244>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x244>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x244>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x244>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x244>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x244>
 80013ce:	2300      	movs	r3, #0
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013e0:	4937      	ldr	r1, [pc, #220]	; (80014c0 <HAL_GPIO_Init+0x334>)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_GPIO_Init+0x350>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001412:	4a32      	ldr	r2, [pc, #200]	; (80014dc <HAL_GPIO_Init+0x350>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001418:	4b30      	ldr	r3, [pc, #192]	; (80014dc <HAL_GPIO_Init+0x350>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800143c:	4a27      	ldr	r2, [pc, #156]	; (80014dc <HAL_GPIO_Init+0x350>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_GPIO_Init+0x350>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001466:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <HAL_GPIO_Init+0x350>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_GPIO_Init+0x350>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <HAL_GPIO_Init+0x350>)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa22 f303 	lsr.w	r3, r2, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f47f ae78 	bne.w	800119c <HAL_GPIO_Init+0x10>
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000
 80014c4:	48000400 	.word	0x48000400
 80014c8:	48000800 	.word	0x48000800
 80014cc:	48000c00 	.word	0x48000c00
 80014d0:	48001000 	.word	0x48001000
 80014d4:	48001400 	.word	0x48001400
 80014d8:	48001800 	.word	0x48001800
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f806 	bl	8001540 <HAL_GPIO_EXTI_Callback>
  }
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e081      	b.n	800166c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d106      	bne.n	8001582 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff f897 	bl	80006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2224      	movs	r2, #36	; 0x24
 8001586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d107      	bne.n	80015d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	e006      	b.n	80015de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d104      	bne.n	80015f0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001602:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001612:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	ea42 0103 	orr.w	r1, r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	021a      	lsls	r2, r3, #8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69d9      	ldr	r1, [r3, #28]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1a      	ldr	r2, [r3, #32]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2220      	movs	r2, #32
 8001658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af02      	add	r7, sp, #8
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	4603      	mov	r3, r0
 8001684:	817b      	strh	r3, [r7, #10]
 8001686:	460b      	mov	r3, r1
 8001688:	813b      	strh	r3, [r7, #8]
 800168a:	4613      	mov	r3, r2
 800168c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b20      	cmp	r3, #32
 8001698:	f040 80f9 	bne.w	800188e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <HAL_I2C_Mem_Write+0x34>
 80016a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d105      	bne.n	80016b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0ed      	b.n	8001890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d101      	bne.n	80016c2 <HAL_I2C_Mem_Write+0x4e>
 80016be:	2302      	movs	r3, #2
 80016c0:	e0e6      	b.n	8001890 <HAL_I2C_Mem_Write+0x21c>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016ca:	f7ff fb57 	bl	8000d7c <HAL_GetTick>
 80016ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2319      	movs	r3, #25
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 fac3 	bl	8001c68 <I2C_WaitOnFlagUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0d1      	b.n	8001890 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2221      	movs	r2, #33	; 0x21
 80016f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2240      	movs	r2, #64	; 0x40
 80016f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a3a      	ldr	r2, [r7, #32]
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800170c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001714:	88f8      	ldrh	r0, [r7, #6]
 8001716:	893a      	ldrh	r2, [r7, #8]
 8001718:	8979      	ldrh	r1, [r7, #10]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	4603      	mov	r3, r0
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f9d3 	bl	8001ad0 <I2C_RequestMemoryWrite>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0a9      	b.n	8001890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d90e      	bls.n	8001764 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	22ff      	movs	r2, #255	; 0xff
 800174a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001750:	b2da      	uxtb	r2, r3
 8001752:	8979      	ldrh	r1, [r7, #10]
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 fba5 	bl	8001eac <I2C_TransferConfig>
 8001762:	e00f      	b.n	8001784 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001772:	b2da      	uxtb	r2, r3
 8001774:	8979      	ldrh	r1, [r7, #10]
 8001776:	2300      	movs	r3, #0
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 fb94 	bl	8001eac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 faad 	bl	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e07b      	b.n	8001890 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d034      	beq.n	800183c <HAL_I2C_Mem_Write+0x1c8>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d130      	bne.n	800183c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	2200      	movs	r2, #0
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 fa3f 	bl	8001c68 <I2C_WaitOnFlagUntilTimeout>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e04d      	b.n	8001890 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2bff      	cmp	r3, #255	; 0xff
 80017fc:	d90e      	bls.n	800181c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	22ff      	movs	r2, #255	; 0xff
 8001802:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	b2da      	uxtb	r2, r3
 800180a:	8979      	ldrh	r1, [r7, #10]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 fb49 	bl	8001eac <I2C_TransferConfig>
 800181a:	e00f      	b.n	800183c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182a:	b2da      	uxtb	r2, r3
 800182c:	8979      	ldrh	r1, [r7, #10]
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fb38 	bl	8001eac <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d19e      	bne.n	8001784 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fa8c 	bl	8001d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e01a      	b.n	8001890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2220      	movs	r2, #32
 8001860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_I2C_Mem_Write+0x224>)
 800186e:	400b      	ands	r3, r1
 8001870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800188e:	2302      	movs	r3, #2
  }
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	fe00e800 	.word	0xfe00e800

0800189c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	817b      	strh	r3, [r7, #10]
 80018ae:	460b      	mov	r3, r1
 80018b0:	813b      	strh	r3, [r7, #8]
 80018b2:	4613      	mov	r3, r2
 80018b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b20      	cmp	r3, #32
 80018c0:	f040 80fd 	bne.w	8001abe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_I2C_Mem_Read+0x34>
 80018ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0f1      	b.n	8001ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_I2C_Mem_Read+0x4e>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e0ea      	b.n	8001ac0 <HAL_I2C_Mem_Read+0x224>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018f2:	f7ff fa43 	bl	8000d7c <HAL_GetTick>
 80018f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2319      	movs	r3, #25
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f9af 	bl	8001c68 <I2C_WaitOnFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d5      	b.n	8001ac0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2222      	movs	r2, #34	; 0x22
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a3a      	ldr	r2, [r7, #32]
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001934:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800193c:	88f8      	ldrh	r0, [r7, #6]
 800193e:	893a      	ldrh	r2, [r7, #8]
 8001940:	8979      	ldrh	r1, [r7, #10]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4603      	mov	r3, r0
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f913 	bl	8001b78 <I2C_RequestMemoryRead>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0ad      	b.n	8001ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d90e      	bls.n	800198c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	22ff      	movs	r2, #255	; 0xff
 8001972:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	b2da      	uxtb	r2, r3
 800197a:	8979      	ldrh	r1, [r7, #10]
 800197c:	4b52      	ldr	r3, [pc, #328]	; (8001ac8 <HAL_I2C_Mem_Read+0x22c>)
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 fa91 	bl	8001eac <I2C_TransferConfig>
 800198a:	e00f      	b.n	80019ac <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199a:	b2da      	uxtb	r2, r3
 800199c:	8979      	ldrh	r1, [r7, #10]
 800199e:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <HAL_I2C_Mem_Read+0x22c>)
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 fa80 	bl	8001eac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	2200      	movs	r2, #0
 80019b4:	2104      	movs	r1, #4
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f956 	bl	8001c68 <I2C_WaitOnFlagUntilTimeout>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07c      	b.n	8001ac0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d034      	beq.n	8001a6c <HAL_I2C_Mem_Read+0x1d0>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d130      	bne.n	8001a6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	2200      	movs	r2, #0
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f927 	bl	8001c68 <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e04d      	b.n	8001ac0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2bff      	cmp	r3, #255	; 0xff
 8001a2c:	d90e      	bls.n	8001a4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	22ff      	movs	r2, #255	; 0xff
 8001a32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	8979      	ldrh	r1, [r7, #10]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 fa31 	bl	8001eac <I2C_TransferConfig>
 8001a4a:	e00f      	b.n	8001a6c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	8979      	ldrh	r1, [r7, #10]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fa20 	bl	8001eac <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d19a      	bne.n	80019ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f974 	bl	8001d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e01a      	b.n	8001ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_I2C_Mem_Read+0x230>)
 8001a9e:	400b      	ands	r3, r1
 8001aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001abe:	2302      	movs	r3, #2
  }
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	80002400 	.word	0x80002400
 8001acc:	fe00e800 	.word	0xfe00e800

08001ad0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	4608      	mov	r0, r1
 8001ada:	4611      	mov	r1, r2
 8001adc:	461a      	mov	r2, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	817b      	strh	r3, [r7, #10]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	813b      	strh	r3, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	8979      	ldrh	r1, [r7, #10]
 8001af0:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <I2C_RequestMemoryWrite+0xa4>)
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f9d7 	bl	8001eac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	69b9      	ldr	r1, [r7, #24]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f8f0 	bl	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e02c      	b.n	8001b6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b18:	893b      	ldrh	r3, [r7, #8]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
 8001b22:	e015      	b.n	8001b50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b24:	893b      	ldrh	r3, [r7, #8]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	69b9      	ldr	r1, [r7, #24]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f8d6 	bl	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e012      	b.n	8001b6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b46:	893b      	ldrh	r3, [r7, #8]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2200      	movs	r2, #0
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f884 	bl	8001c68 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	80002000 	.word	0x80002000

08001b78 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	817b      	strh	r3, [r7, #10]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	813b      	strh	r3, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	8979      	ldrh	r1, [r7, #10]
 8001b98:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <I2C_RequestMemoryRead+0xa4>)
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f984 	bl	8001eac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f89d 	bl	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e02c      	b.n	8001c12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d105      	bne.n	8001bca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bbe:	893b      	ldrh	r3, [r7, #8]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8001bc8:	e015      	b.n	8001bf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bca:	893b      	ldrh	r3, [r7, #8]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f883 	bl	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e012      	b.n	8001c12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bec:	893b      	ldrh	r3, [r7, #8]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2140      	movs	r1, #64	; 0x40
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f831 	bl	8001c68 <I2C_WaitOnFlagUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	80002000 	.word	0x80002000

08001c20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d103      	bne.n	8001c3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d007      	beq.n	8001c5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	619a      	str	r2, [r3, #24]
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c78:	e022      	b.n	8001cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d01e      	beq.n	8001cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c82:	f7ff f87b 	bl	8000d7c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d302      	bcc.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d113      	bne.n	8001cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	f043 0220 	orr.w	r2, r3, #32
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e00f      	b.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d0cd      	beq.n	8001c7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cf4:	e02c      	b.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f870 	bl	8001de0 <I2C_IsAcknowledgeFailed>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e02a      	b.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d01e      	beq.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d12:	f7ff f833 	bl	8000d7c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d302      	bcc.n	8001d28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d113      	bne.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f043 0220 	orr.w	r2, r3, #32
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e007      	b.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d1cb      	bne.n	8001cf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d74:	e028      	b.n	8001dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f830 	bl	8001de0 <I2C_IsAcknowledgeFailed>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e026      	b.n	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8a:	f7fe fff7 	bl	8000d7c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d302      	bcc.n	8001da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d113      	bne.n	8001dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f043 0220 	orr.w	r2, r3, #32
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e007      	b.n	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d1cf      	bne.n	8001d76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d151      	bne.n	8001e9e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dfa:	e022      	b.n	8001e42 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e02:	d01e      	beq.n	8001e42 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e04:	f7fe ffba 	bl	8000d7c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d302      	bcc.n	8001e1a <I2C_IsAcknowledgeFailed+0x3a>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d113      	bne.n	8001e42 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f043 0220 	orr.w	r2, r3, #32
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e02e      	b.n	8001ea0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d1d5      	bne.n	8001dfc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2210      	movs	r2, #16
 8001e56:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7ff fedd 	bl	8001c20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001e72:	400b      	ands	r3, r1
 8001e74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f043 0204 	orr.w	r2, r3, #4
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	fe00e800 	.word	0xfe00e800

08001eac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	817b      	strh	r3, [r7, #10]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	0d5b      	lsrs	r3, r3, #21
 8001ec8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <I2C_TransferConfig+0x58>)
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	ea02 0103 	and.w	r1, r2, r3
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001edc:	7a7b      	ldrb	r3, [r7, #9]
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	03ff63ff 	.word	0x03ff63ff

08001f08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d138      	bne.n	8001f90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e032      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	; 0x24
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d139      	bne.n	8002028 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e033      	b.n	800202a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2224      	movs	r2, #36	; 0x24
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ff0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_PWREx_GetVoltageRange+0x18>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002062:	d130      	bne.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800206c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002070:	d038      	beq.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800207a:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002080:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2232      	movs	r2, #50	; 0x32
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9b      	lsrs	r3, r3, #18
 8002094:	3301      	adds	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002098:	e002      	b.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3b01      	subs	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ac:	d102      	bne.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f2      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c0:	d110      	bne.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e00f      	b.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d2:	d007      	beq.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020dc:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40007000 	.word	0x40007000
 80020f8:	20000000 	.word	0x20000000
 80020fc:	431bde83 	.word	0x431bde83

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e3d8      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002112:	4b97      	ldr	r3, [pc, #604]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800211c:	4b94      	ldr	r3, [pc, #592]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80e4 	beq.w	80022fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_RCC_OscConfig+0x4a>
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b0c      	cmp	r3, #12
 800213e:	f040 808b 	bne.w	8002258 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b01      	cmp	r3, #1
 8002146:	f040 8087 	bne.w	8002258 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x62>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e3b0      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1a      	ldr	r2, [r3, #32]
 8002166:	4b82      	ldr	r3, [pc, #520]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d004      	beq.n	800217c <HAL_RCC_OscConfig+0x7c>
 8002172:	4b7f      	ldr	r3, [pc, #508]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800217a:	e005      	b.n	8002188 <HAL_RCC_OscConfig+0x88>
 800217c:	4b7c      	ldr	r3, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800217e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002188:	4293      	cmp	r3, r2
 800218a:	d223      	bcs.n	80021d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fd43 	bl	8002c1c <RCC_SetFlashLatencyFromMSIRange>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e391      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a0:	4b73      	ldr	r3, [pc, #460]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a72      	ldr	r2, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b70      	ldr	r3, [pc, #448]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	496d      	ldr	r1, [pc, #436]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	4968      	ldr	r1, [pc, #416]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
 80021d2:	e025      	b.n	8002220 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d4:	4b66      	ldr	r3, [pc, #408]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a65      	ldr	r2, [pc, #404]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4960      	ldr	r1, [pc, #384]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f2:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	495b      	ldr	r1, [pc, #364]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fd03 	bl	8002c1c <RCC_SetFlashLatencyFromMSIRange>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e351      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002220:	f000 fc38 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b52      	ldr	r3, [pc, #328]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	4950      	ldr	r1, [pc, #320]	; (8002374 <HAL_RCC_OscConfig+0x274>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <HAL_RCC_OscConfig+0x278>)
 800223e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002240:	4b4e      	ldr	r3, [pc, #312]	; (800237c <HAL_RCC_OscConfig+0x27c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fd49 	bl	8000cdc <HAL_InitTick>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d052      	beq.n	80022fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	e335      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d032      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002260:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a42      	ldr	r2, [pc, #264]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800226c:	f7fe fd86 	bl	8000d7c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002274:	f7fe fd82 	bl	8000d7c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e31e      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002286:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a36      	ldr	r2, [pc, #216]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002298:	f043 0308 	orr.w	r3, r3, #8
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4931      	ldr	r1, [pc, #196]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b0:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	492c      	ldr	r1, [pc, #176]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
 80022c4:	e01a      	b.n	80022fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022c6:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022d2:	f7fe fd53 	bl	8000d7c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022da:	f7fe fd4f 	bl	8000d7c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e2eb      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x1da>
 80022f8:	e000      	b.n	80022fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d074      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b08      	cmp	r3, #8
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x21a>
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b0c      	cmp	r3, #12
 8002312:	d10e      	bne.n	8002332 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d10b      	bne.n	8002332 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d064      	beq.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d160      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e2c8      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x24a>
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e026      	b.n	8002398 <HAL_RCC_OscConfig+0x298>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002352:	d115      	bne.n	8002380 <HAL_RCC_OscConfig+0x280>
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a05      	ldr	r2, [pc, #20]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800235a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a02      	ldr	r2, [pc, #8]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x298>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	08003fa4 	.word	0x08003fa4
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004
 8002380:	4ba0      	ldr	r3, [pc, #640]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a9f      	ldr	r2, [pc, #636]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b9d      	ldr	r3, [pc, #628]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a9c      	ldr	r2, [pc, #624]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fcec 	bl	8000d7c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fce8 	bl	8000d7c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e284      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ba:	4b92      	ldr	r3, [pc, #584]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x2a8>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fcd8 	bl	8000d7c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fcd4 	bl	8000d7c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e270      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e2:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x2d0>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d060      	beq.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <HAL_RCC_OscConfig+0x310>
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d119      	bne.n	800243e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d116      	bne.n	800243e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002410:	4b7c      	ldr	r3, [pc, #496]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x328>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e24d      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b76      	ldr	r3, [pc, #472]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	4973      	ldr	r1, [pc, #460]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800243c:	e040      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d023      	beq.n	800248e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002446:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6e      	ldr	r2, [pc, #440]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe fc93 	bl	8000d7c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245a:	f7fe fc8f 	bl	8000d7c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e22b      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	4b65      	ldr	r3, [pc, #404]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b62      	ldr	r3, [pc, #392]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	495f      	ldr	r1, [pc, #380]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
 800248c:	e018      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248e:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a5c      	ldr	r2, [pc, #368]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe fc6f 	bl	8000d7c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a2:	f7fe fc6b 	bl	8000d7c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e207      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d03c      	beq.n	8002546 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80024d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024da:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7fe fc4a 	bl	8000d7c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe fc46 	bl	8000d7c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1e2      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ef      	beq.n	80024ec <HAL_RCC_OscConfig+0x3ec>
 800250c:	e01b      	b.n	8002546 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002514:	4a3b      	ldr	r2, [pc, #236]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe fc2d 	bl	8000d7c <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7fe fc29 	bl	8000d7c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1c5      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ef      	bne.n	8002526 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80a6 	beq.w	80026a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a26      	ldr	r2, [pc, #152]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800256a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257c:	2301      	movs	r3, #1
 800257e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCC_OscConfig+0x508>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d118      	bne.n	80025be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_OscConfig+0x508>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x508>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002596:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002598:	f7fe fbf0 	bl	8000d7c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a0:	f7fe fbec 	bl	8000d7c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e188      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_RCC_OscConfig+0x508>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4d8>
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025d6:	e029      	b.n	800262c <HAL_RCC_OscConfig+0x52c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d115      	bne.n	800260c <HAL_RCC_OscConfig+0x50c>
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	4a03      	ldr	r2, [pc, #12]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002600:	e014      	b.n	800262c <HAL_RCC_OscConfig+0x52c>
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	40007000 	.word	0x40007000
 800260c:	4b91      	ldr	r3, [pc, #580]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	4a90      	ldr	r2, [pc, #576]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800261c:	4b8d      	ldr	r3, [pc, #564]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	4a8c      	ldr	r2, [pc, #560]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d016      	beq.n	8002662 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe fba2 	bl	8000d7c <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7fe fb9e 	bl	8000d7c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e138      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002652:	4b80      	ldr	r3, [pc, #512]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ed      	beq.n	800263c <HAL_RCC_OscConfig+0x53c>
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fe fb8b 	bl	8000d7c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fb87 	bl	8000d7c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e121      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002680:	4b74      	ldr	r3, [pc, #464]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ed      	bne.n	800266a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268e:	7ffb      	ldrb	r3, [r7, #31]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b6f      	ldr	r3, [pc, #444]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	4a6e      	ldr	r2, [pc, #440]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 810c 	beq.w	80028c2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	f040 80d4 	bne.w	800285c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026b4:	4b67      	ldr	r3, [pc, #412]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d130      	bne.n	800272a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	3b01      	subs	r3, #1
 80026d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d127      	bne.n	800272a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d11f      	bne.n	800272a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026f4:	2a07      	cmp	r2, #7
 80026f6:	bf14      	ite	ne
 80026f8:	2201      	movne	r2, #1
 80026fa:	2200      	moveq	r2, #0
 80026fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fe:	4293      	cmp	r3, r2
 8002700:	d113      	bne.n	800272a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	3b01      	subs	r3, #1
 8002710:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d109      	bne.n	800272a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	3b01      	subs	r3, #1
 8002724:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d06e      	beq.n	8002808 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d069      	beq.n	8002804 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002730:	4b48      	ldr	r3, [pc, #288]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800273c:	4b45      	ldr	r3, [pc, #276]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0bb      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800274c:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a40      	ldr	r2, [pc, #256]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002756:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002758:	f7fe fb10 	bl	8000d7c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fb0c 	bl	8000d7c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0a8      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277e:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_RCC_OscConfig+0x758>)
 8002784:	4013      	ands	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800278e:	3a01      	subs	r2, #1
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	4311      	orrs	r1, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002798:	0212      	lsls	r2, r2, #8
 800279a:	4311      	orrs	r1, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027a0:	0852      	lsrs	r2, r2, #1
 80027a2:	3a01      	subs	r2, #1
 80027a4:	0552      	lsls	r2, r2, #21
 80027a6:	4311      	orrs	r1, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027ac:	0852      	lsrs	r2, r2, #1
 80027ae:	3a01      	subs	r2, #1
 80027b0:	0652      	lsls	r2, r2, #25
 80027b2:	4311      	orrs	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b8:	0912      	lsrs	r2, r2, #4
 80027ba:	0452      	lsls	r2, r2, #17
 80027bc:	430a      	orrs	r2, r1
 80027be:	4925      	ldr	r1, [pc, #148]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a22      	ldr	r2, [pc, #136]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 80027ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 80027d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027dc:	f7fe face 	bl	8000d7c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe faca 	bl	8000d7c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e066      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002802:	e05e      	b.n	80028c2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e05d      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d156      	bne.n	80028c2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 800281a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800282c:	f7fe faa6 	bl	8000d7c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe faa2 	bl	8000d7c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e03e      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002846:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCC_OscConfig+0x754>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x734>
 8002852:	e036      	b.n	80028c2 <HAL_RCC_OscConfig+0x7c2>
 8002854:	40021000 	.word	0x40021000
 8002858:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d02d      	beq.n	80028be <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_RCC_OscConfig+0x7cc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_RCC_OscConfig+0x7cc>)
 8002868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_RCC_OscConfig+0x7cc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_RCC_OscConfig+0x7cc>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4a13      	ldr	r2, [pc, #76]	; (80028cc <HAL_RCC_OscConfig+0x7cc>)
 8002880:	f023 0303 	bic.w	r3, r3, #3
 8002884:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_RCC_OscConfig+0x7cc>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x7cc>)
 800288c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002894:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fa71 	bl	8000d7c <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fa6d 	bl	8000d7c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e009      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_OscConfig+0x7cc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f0      	bne.n	800289e <HAL_RCC_OscConfig+0x79e>
 80028bc:	e001      	b.n	80028c2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0c8      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b66      	ldr	r3, [pc, #408]	; (8002a80 <HAL_RCC_ClockConfig+0x1b0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d910      	bls.n	8002914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_ClockConfig+0x1b0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	4961      	ldr	r1, [pc, #388]	; (8002a80 <HAL_RCC_ClockConfig+0x1b0>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <HAL_RCC_ClockConfig+0x1b0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b0      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d04c      	beq.n	80029ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d107      	bne.n	8002938 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002928:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d121      	bne.n	8002978 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e09e      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d107      	bne.n	8002950 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d115      	bne.n	8002978 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e092      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002958:	4b4a      	ldr	r3, [pc, #296]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e086      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002968:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e07e      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002978:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 0203 	bic.w	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	493f      	ldr	r1, [pc, #252]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298a:	f7fe f9f7 	bl	8000d7c <HAL_GetTick>
 800298e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002992:	f7fe f9f3 	bl	8000d7c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e066      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 020c 	and.w	r2, r3, #12
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d1eb      	bne.n	8002992 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c6:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	492c      	ldr	r1, [pc, #176]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d8:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_RCC_ClockConfig+0x1b0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d210      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_RCC_ClockConfig+0x1b0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	4924      	ldr	r1, [pc, #144]	; (8002a80 <HAL_RCC_ClockConfig+0x1b0>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_ClockConfig+0x1b0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e036      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4918      	ldr	r1, [pc, #96]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4910      	ldr	r1, [pc, #64]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a46:	f000 f825 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_RCC_ClockConfig+0x1b4>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	490c      	ldr	r1, [pc, #48]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe f936 	bl	8000cdc <HAL_InitTick>
 8002a70:	4603      	mov	r3, r0
 8002a72:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a74:	7afb      	ldrb	r3, [r7, #11]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08003fa4 	.word	0x08003fa4
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000004 	.word	0x20000004

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa2:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d121      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d11e      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ac8:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ad4:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e005      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002af0:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d102      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e004      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d134      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d003      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0xac>
 8002b38:	e005      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b3c:	617b      	str	r3, [r7, #20]
      break;
 8002b3e:	e005      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b42:	617b      	str	r3, [r7, #20]
      break;
 8002b44:	e002      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	617b      	str	r3, [r7, #20]
      break;
 8002b4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	3301      	adds	r3, #1
 8002b58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	fb03 f202 	mul.w	r2, r3, r2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	0e5b      	lsrs	r3, r3, #25
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08003fbc 	.word	0x08003fbc
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4904      	ldr	r1, [pc, #16]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08003fb4 	.word	0x08003fb4

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bf4:	f7ff ffda 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0adb      	lsrs	r3, r3, #11
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08003fb4 	.word	0x08003fb4

08002c1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c28:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c34:	f7ff fa00 	bl	8002038 <HAL_PWREx_GetVoltageRange>
 8002c38:	6178      	str	r0, [r7, #20]
 8002c3a:	e014      	b.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4a24      	ldr	r2, [pc, #144]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c54:	f7ff f9f0 	bl	8002038 <HAL_PWREx_GetVoltageRange>
 8002c58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6c:	d10b      	bne.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d919      	bls.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2ba0      	cmp	r3, #160	; 0xa0
 8002c78:	d902      	bls.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	e013      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c80:	2301      	movs	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e010      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d902      	bls.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e00a      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b80      	cmp	r3, #128	; 0x80
 8002c96:	d102      	bne.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c98:	2302      	movs	r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e004      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b70      	cmp	r3, #112	; 0x70
 8002ca2:	d101      	bne.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 0207 	bic.w	r2, r3, #7
 8002cb0:	4909      	ldr	r1, [pc, #36]	; (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40022000 	.word	0x40022000

08002cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d041      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d00:	d02a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d06:	d824      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d12:	d81e      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1c:	d010      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d1e:	e018      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d20:	4b86      	ldr	r3, [pc, #536]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a85      	ldr	r2, [pc, #532]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d2c:	e015      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fabb 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d3e:	e00c      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3320      	adds	r3, #32
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fba6 	bl	8003498 <RCCEx_PLLSAI2_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d50:	e003      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	74fb      	strb	r3, [r7, #19]
      break;
 8002d56:	e000      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d60:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6e:	4973      	ldr	r1, [pc, #460]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d76:	e001      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d041      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d90:	d02a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d96:	d824      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002da2:	d81e      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dac:	d010      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dae:	e018      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002db0:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a61      	ldr	r2, [pc, #388]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dbc:	e015      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fa73 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dce:	e00c      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3320      	adds	r3, #32
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fb5e 	bl	8003498 <RCCEx_PLLSAI2_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002de0:	e003      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	74fb      	strb	r3, [r7, #19]
      break;
 8002de6:	e000      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002df0:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfe:	494f      	ldr	r1, [pc, #316]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e06:	e001      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a0 	beq.w	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	4a40      	ldr	r2, [pc, #256]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e50:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a3a      	ldr	r2, [pc, #232]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e5c:	f7fd ff8e 	bl	8000d7c <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e62:	e009      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e64:	f7fd ff8a 	bl	8000d7c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d902      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	74fb      	strb	r3, [r7, #19]
        break;
 8002e76:	e005      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e78:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ef      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d15c      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01f      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d019      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a20      	ldr	r2, [pc, #128]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fd ff49 	bl	8000d7c <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eec:	e00b      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fd ff45 	bl	8000d7c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d902      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	74fb      	strb	r3, [r7, #19]
            break;
 8002f04:	e006      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ec      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	4904      	ldr	r1, [pc, #16]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f32:	e009      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
 8002f38:	e006      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f48:	7c7b      	ldrb	r3, [r7, #17]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b9e      	ldr	r3, [pc, #632]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	4a9d      	ldr	r2, [pc, #628]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f66:	4b98      	ldr	r3, [pc, #608]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 0203 	bic.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	4994      	ldr	r1, [pc, #592]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f88:	4b8f      	ldr	r3, [pc, #572]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 020c 	bic.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	498c      	ldr	r1, [pc, #560]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002faa:	4b87      	ldr	r3, [pc, #540]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4983      	ldr	r1, [pc, #524]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fcc:	4b7e      	ldr	r3, [pc, #504]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	497b      	ldr	r1, [pc, #492]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fee:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	4972      	ldr	r1, [pc, #456]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003010:	4b6d      	ldr	r3, [pc, #436]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	496a      	ldr	r1, [pc, #424]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003032:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	4961      	ldr	r1, [pc, #388]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003054:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003062:	4959      	ldr	r1, [pc, #356]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003076:	4b54      	ldr	r3, [pc, #336]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003084:	4950      	ldr	r1, [pc, #320]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003098:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	4948      	ldr	r1, [pc, #288]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	493f      	ldr	r1, [pc, #252]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d028      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030dc:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ea:	4937      	ldr	r1, [pc, #220]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fa:	d106      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003106:	60d3      	str	r3, [r2, #12]
 8003108:	e011      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003112:	d10c      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f8c8 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d028      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	491f      	ldr	r1, [pc, #124]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003158:	d106      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003164:	60d3      	str	r3, [r2, #12]
 8003166:	e011      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003170:	d10c      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f899 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02b      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b6:	d109      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a02      	ldr	r2, [pc, #8]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c2:	60d3      	str	r3, [r2, #12]
 80031c4:	e014      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f867 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800320a:	4928      	ldr	r1, [pc, #160]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800321a:	d10d      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f844 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d014      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	74bb      	strb	r3, [r7, #18]
 8003236:	e011      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800323c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003240:	d10c      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3320      	adds	r3, #32
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f925 	bl	8003498 <RCCEx_PLLSAI2_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003276:	490d      	ldr	r1, [pc, #52]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329a:	4904      	ldr	r1, [pc, #16]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000

080032b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032be:	4b75      	ldr	r3, [pc, #468]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d018      	beq.n	80032fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032ca:	4b72      	ldr	r3, [pc, #456]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0203 	and.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d10d      	bne.n	80032f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
       ||
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032e2:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
       ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d047      	beq.n	8003386 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	e044      	b.n	8003386 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d018      	beq.n	8003336 <RCCEx_PLLSAI1_Config+0x86>
 8003304:	2b03      	cmp	r3, #3
 8003306:	d825      	bhi.n	8003354 <RCCEx_PLLSAI1_Config+0xa4>
 8003308:	2b01      	cmp	r3, #1
 800330a:	d002      	beq.n	8003312 <RCCEx_PLLSAI1_Config+0x62>
 800330c:	2b02      	cmp	r3, #2
 800330e:	d009      	beq.n	8003324 <RCCEx_PLLSAI1_Config+0x74>
 8003310:	e020      	b.n	8003354 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003312:	4b60      	ldr	r3, [pc, #384]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11d      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e01a      	b.n	800335a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003324:	4b5b      	ldr	r3, [pc, #364]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d116      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003334:	e013      	b.n	800335e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003336:	4b57      	ldr	r3, [pc, #348]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003342:	4b54      	ldr	r3, [pc, #336]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003352:	e006      	b.n	8003362 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e004      	b.n	8003364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335a:	bf00      	nop
 800335c:	e002      	b.n	8003364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335e:	bf00      	nop
 8003360:	e000      	b.n	8003364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003362:	bf00      	nop
    }

    if(status == HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10d      	bne.n	8003386 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800336a:	4b4a      	ldr	r3, [pc, #296]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	430b      	orrs	r3, r1
 8003380:	4944      	ldr	r1, [pc, #272]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d17d      	bne.n	8003488 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800338c:	4b41      	ldr	r3, [pc, #260]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a40      	ldr	r2, [pc, #256]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003392:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f7fd fcf0 	bl	8000d7c <HAL_GetTick>
 800339c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800339e:	e009      	b.n	80033b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a0:	f7fd fcec 	bl	8000d7c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d902      	bls.n	80033b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	73fb      	strb	r3, [r7, #15]
        break;
 80033b2:	e005      	b.n	80033c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ef      	bne.n	80033a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d160      	bne.n	8003488 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033cc:	4b31      	ldr	r3, [pc, #196]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6892      	ldr	r2, [r2, #8]
 80033dc:	0211      	lsls	r1, r2, #8
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68d2      	ldr	r2, [r2, #12]
 80033e2:	0912      	lsrs	r2, r2, #4
 80033e4:	0452      	lsls	r2, r2, #17
 80033e6:	430a      	orrs	r2, r1
 80033e8:	492a      	ldr	r1, [pc, #168]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	610b      	str	r3, [r1, #16]
 80033ee:	e027      	b.n	8003440 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d112      	bne.n	800341c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f6:	4b27      	ldr	r3, [pc, #156]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6892      	ldr	r2, [r2, #8]
 8003406:	0211      	lsls	r1, r2, #8
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6912      	ldr	r2, [r2, #16]
 800340c:	0852      	lsrs	r2, r2, #1
 800340e:	3a01      	subs	r2, #1
 8003410:	0552      	lsls	r2, r2, #21
 8003412:	430a      	orrs	r2, r1
 8003414:	491f      	ldr	r1, [pc, #124]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	610b      	str	r3, [r1, #16]
 800341a:	e011      	b.n	8003440 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003424:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6892      	ldr	r2, [r2, #8]
 800342c:	0211      	lsls	r1, r2, #8
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6952      	ldr	r2, [r2, #20]
 8003432:	0852      	lsrs	r2, r2, #1
 8003434:	3a01      	subs	r2, #1
 8003436:	0652      	lsls	r2, r2, #25
 8003438:	430a      	orrs	r2, r1
 800343a:	4916      	ldr	r1, [pc, #88]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a13      	ldr	r2, [pc, #76]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800344a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fd fc96 	bl	8000d7c <HAL_GetTick>
 8003450:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003452:	e009      	b.n	8003468 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003454:	f7fd fc92 	bl	8000d7c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d902      	bls.n	8003468 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	73fb      	strb	r3, [r7, #15]
          break;
 8003466:	e005      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ef      	beq.n	8003454 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	4904      	ldr	r1, [pc, #16]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d018      	beq.n	80034e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034b2:	4b67      	ldr	r3, [pc, #412]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0203 	and.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10d      	bne.n	80034de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
       ||
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034ca:	4b61      	ldr	r3, [pc, #388]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
       ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d047      	beq.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e044      	b.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d018      	beq.n	800351e <RCCEx_PLLSAI2_Config+0x86>
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d825      	bhi.n	800353c <RCCEx_PLLSAI2_Config+0xa4>
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d002      	beq.n	80034fa <RCCEx_PLLSAI2_Config+0x62>
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d009      	beq.n	800350c <RCCEx_PLLSAI2_Config+0x74>
 80034f8:	e020      	b.n	800353c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034fa:	4b55      	ldr	r3, [pc, #340]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11d      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350a:	e01a      	b.n	8003542 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800350c:	4b50      	ldr	r3, [pc, #320]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d116      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351c:	e013      	b.n	8003546 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800351e:	4b4c      	ldr	r3, [pc, #304]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800352a:	4b49      	ldr	r3, [pc, #292]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800353a:	e006      	b.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e004      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003542:	bf00      	nop
 8003544:	e002      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003546:	bf00      	nop
 8003548:	e000      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800354a:	bf00      	nop
    }

    if(status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	430b      	orrs	r3, r1
 8003568:	4939      	ldr	r1, [pc, #228]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d167      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003574:	4b36      	ldr	r3, [pc, #216]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a35      	ldr	r2, [pc, #212]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003580:	f7fd fbfc 	bl	8000d7c <HAL_GetTick>
 8003584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003586:	e009      	b.n	800359c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003588:	f7fd fbf8 	bl	8000d7c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d902      	bls.n	800359c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	73fb      	strb	r3, [r7, #15]
        break;
 800359a:	e005      	b.n	80035a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800359c:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ef      	bne.n	8003588 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d14a      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d111      	bne.n	80035d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b4:	4b26      	ldr	r3, [pc, #152]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6892      	ldr	r2, [r2, #8]
 80035c4:	0211      	lsls	r1, r2, #8
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	0912      	lsrs	r2, r2, #4
 80035cc:	0452      	lsls	r2, r2, #17
 80035ce:	430a      	orrs	r2, r1
 80035d0:	491f      	ldr	r1, [pc, #124]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	614b      	str	r3, [r1, #20]
 80035d6:	e011      	b.n	80035fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6892      	ldr	r2, [r2, #8]
 80035e8:	0211      	lsls	r1, r2, #8
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6912      	ldr	r2, [r2, #16]
 80035ee:	0852      	lsrs	r2, r2, #1
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0652      	lsls	r2, r2, #25
 80035f4:	430a      	orrs	r2, r1
 80035f6:	4916      	ldr	r1, [pc, #88]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035fc:	4b14      	ldr	r3, [pc, #80]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fd fbb8 	bl	8000d7c <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003610:	f7fd fbb4 	bl	8000d7c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
          break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4904      	ldr	r1, [pc, #16]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	4313      	orrs	r3, r2
 8003642:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e040      	b.n	80036e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd faa4 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2224      	movs	r2, #36	; 0x24
 8003680:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f82c 	bl	80036f0 <UART_SetConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e022      	b.n	80036e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fada 	bl	8003c64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fb61 	bl	8003da8 <UART_CheckIdleState>
 80036e6:	4603      	mov	r3, r0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f4:	b08a      	sub	sp, #40	; 0x28
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	431a      	orrs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	4313      	orrs	r3, r2
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4ba4      	ldr	r3, [pc, #656]	; (80039b0 <UART_SetConfig+0x2c0>)
 8003720:	4013      	ands	r3, r2
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003728:	430b      	orrs	r3, r1
 800372a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a99      	ldr	r2, [pc, #612]	; (80039b4 <UART_SetConfig+0x2c4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003758:	4313      	orrs	r3, r2
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	430a      	orrs	r2, r1
 800376e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a90      	ldr	r2, [pc, #576]	; (80039b8 <UART_SetConfig+0x2c8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d126      	bne.n	80037c8 <UART_SetConfig+0xd8>
 800377a:	4b90      	ldr	r3, [pc, #576]	; (80039bc <UART_SetConfig+0x2cc>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b03      	cmp	r3, #3
 8003786:	d81b      	bhi.n	80037c0 <UART_SetConfig+0xd0>
 8003788:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <UART_SetConfig+0xa0>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037b1 	.word	0x080037b1
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e116      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e112      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80037b0:	2304      	movs	r3, #4
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e10e      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80037b8:	2308      	movs	r3, #8
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e10a      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80037c0:	2310      	movs	r3, #16
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e106      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a7c      	ldr	r2, [pc, #496]	; (80039c0 <UART_SetConfig+0x2d0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d138      	bne.n	8003844 <UART_SetConfig+0x154>
 80037d2:	4b7a      	ldr	r3, [pc, #488]	; (80039bc <UART_SetConfig+0x2cc>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d82d      	bhi.n	800383c <UART_SetConfig+0x14c>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <UART_SetConfig+0xf8>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	0800383d 	.word	0x0800383d
 80037f4:	0800383d 	.word	0x0800383d
 80037f8:	0800382d 	.word	0x0800382d
 80037fc:	0800383d 	.word	0x0800383d
 8003800:	0800383d 	.word	0x0800383d
 8003804:	0800383d 	.word	0x0800383d
 8003808:	08003825 	.word	0x08003825
 800380c:	0800383d 	.word	0x0800383d
 8003810:	0800383d 	.word	0x0800383d
 8003814:	0800383d 	.word	0x0800383d
 8003818:	08003835 	.word	0x08003835
 800381c:	2300      	movs	r3, #0
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003822:	e0d8      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003824:	2302      	movs	r3, #2
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e0d4      	b.n	80039d6 <UART_SetConfig+0x2e6>
 800382c:	2304      	movs	r3, #4
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e0d0      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003834:	2308      	movs	r3, #8
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383a:	e0cc      	b.n	80039d6 <UART_SetConfig+0x2e6>
 800383c:	2310      	movs	r3, #16
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003842:	e0c8      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a5e      	ldr	r2, [pc, #376]	; (80039c4 <UART_SetConfig+0x2d4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d125      	bne.n	800389a <UART_SetConfig+0x1aa>
 800384e:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <UART_SetConfig+0x2cc>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003858:	2b30      	cmp	r3, #48	; 0x30
 800385a:	d016      	beq.n	800388a <UART_SetConfig+0x19a>
 800385c:	2b30      	cmp	r3, #48	; 0x30
 800385e:	d818      	bhi.n	8003892 <UART_SetConfig+0x1a2>
 8003860:	2b20      	cmp	r3, #32
 8003862:	d00a      	beq.n	800387a <UART_SetConfig+0x18a>
 8003864:	2b20      	cmp	r3, #32
 8003866:	d814      	bhi.n	8003892 <UART_SetConfig+0x1a2>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <UART_SetConfig+0x182>
 800386c:	2b10      	cmp	r3, #16
 800386e:	d008      	beq.n	8003882 <UART_SetConfig+0x192>
 8003870:	e00f      	b.n	8003892 <UART_SetConfig+0x1a2>
 8003872:	2300      	movs	r3, #0
 8003874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003878:	e0ad      	b.n	80039d6 <UART_SetConfig+0x2e6>
 800387a:	2302      	movs	r3, #2
 800387c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003880:	e0a9      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003882:	2304      	movs	r3, #4
 8003884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003888:	e0a5      	b.n	80039d6 <UART_SetConfig+0x2e6>
 800388a:	2308      	movs	r3, #8
 800388c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003890:	e0a1      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003892:	2310      	movs	r3, #16
 8003894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003898:	e09d      	b.n	80039d6 <UART_SetConfig+0x2e6>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a4a      	ldr	r2, [pc, #296]	; (80039c8 <UART_SetConfig+0x2d8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d125      	bne.n	80038f0 <UART_SetConfig+0x200>
 80038a4:	4b45      	ldr	r3, [pc, #276]	; (80039bc <UART_SetConfig+0x2cc>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038ae:	2bc0      	cmp	r3, #192	; 0xc0
 80038b0:	d016      	beq.n	80038e0 <UART_SetConfig+0x1f0>
 80038b2:	2bc0      	cmp	r3, #192	; 0xc0
 80038b4:	d818      	bhi.n	80038e8 <UART_SetConfig+0x1f8>
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d00a      	beq.n	80038d0 <UART_SetConfig+0x1e0>
 80038ba:	2b80      	cmp	r3, #128	; 0x80
 80038bc:	d814      	bhi.n	80038e8 <UART_SetConfig+0x1f8>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <UART_SetConfig+0x1d8>
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d008      	beq.n	80038d8 <UART_SetConfig+0x1e8>
 80038c6:	e00f      	b.n	80038e8 <UART_SetConfig+0x1f8>
 80038c8:	2300      	movs	r3, #0
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ce:	e082      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80038d0:	2302      	movs	r3, #2
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d6:	e07e      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80038d8:	2304      	movs	r3, #4
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038de:	e07a      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80038e0:	2308      	movs	r3, #8
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e6:	e076      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80038e8:	2310      	movs	r3, #16
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ee:	e072      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a35      	ldr	r2, [pc, #212]	; (80039cc <UART_SetConfig+0x2dc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d12a      	bne.n	8003950 <UART_SetConfig+0x260>
 80038fa:	4b30      	ldr	r3, [pc, #192]	; (80039bc <UART_SetConfig+0x2cc>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003908:	d01a      	beq.n	8003940 <UART_SetConfig+0x250>
 800390a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800390e:	d81b      	bhi.n	8003948 <UART_SetConfig+0x258>
 8003910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003914:	d00c      	beq.n	8003930 <UART_SetConfig+0x240>
 8003916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391a:	d815      	bhi.n	8003948 <UART_SetConfig+0x258>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <UART_SetConfig+0x238>
 8003920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003924:	d008      	beq.n	8003938 <UART_SetConfig+0x248>
 8003926:	e00f      	b.n	8003948 <UART_SetConfig+0x258>
 8003928:	2300      	movs	r3, #0
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e052      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003930:	2302      	movs	r3, #2
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e04e      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003938:	2304      	movs	r3, #4
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393e:	e04a      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003940:	2308      	movs	r3, #8
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003946:	e046      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003948:	2310      	movs	r3, #16
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394e:	e042      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <UART_SetConfig+0x2c4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d13a      	bne.n	80039d0 <UART_SetConfig+0x2e0>
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <UART_SetConfig+0x2cc>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003964:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003968:	d01a      	beq.n	80039a0 <UART_SetConfig+0x2b0>
 800396a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800396e:	d81b      	bhi.n	80039a8 <UART_SetConfig+0x2b8>
 8003970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003974:	d00c      	beq.n	8003990 <UART_SetConfig+0x2a0>
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397a:	d815      	bhi.n	80039a8 <UART_SetConfig+0x2b8>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <UART_SetConfig+0x298>
 8003980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003984:	d008      	beq.n	8003998 <UART_SetConfig+0x2a8>
 8003986:	e00f      	b.n	80039a8 <UART_SetConfig+0x2b8>
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e022      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003990:	2302      	movs	r3, #2
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e01e      	b.n	80039d6 <UART_SetConfig+0x2e6>
 8003998:	2304      	movs	r3, #4
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e01a      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80039a0:	2308      	movs	r3, #8
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e016      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80039a8:	2310      	movs	r3, #16
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ae:	e012      	b.n	80039d6 <UART_SetConfig+0x2e6>
 80039b0:	efff69f3 	.word	0xefff69f3
 80039b4:	40008000 	.word	0x40008000
 80039b8:	40013800 	.word	0x40013800
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40004400 	.word	0x40004400
 80039c4:	40004800 	.word	0x40004800
 80039c8:	40004c00 	.word	0x40004c00
 80039cc:	40005000 	.word	0x40005000
 80039d0:	2310      	movs	r3, #16
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4aa0      	ldr	r2, [pc, #640]	; (8003c5c <UART_SetConfig+0x56c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d17a      	bne.n	8003ad6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d824      	bhi.n	8003a32 <UART_SetConfig+0x342>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <UART_SetConfig+0x300>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a23 	.word	0x08003a23
 8003a04:	08003a33 	.word	0x08003a33
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a33 	.word	0x08003a33
 8003a10:	08003a2b 	.word	0x08003a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a14:	f7ff f8d6 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003a18:	61f8      	str	r0, [r7, #28]
        break;
 8003a1a:	e010      	b.n	8003a3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b90      	ldr	r3, [pc, #576]	; (8003c60 <UART_SetConfig+0x570>)
 8003a1e:	61fb      	str	r3, [r7, #28]
        break;
 8003a20:	e00d      	b.n	8003a3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7ff f837 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8003a26:	61f8      	str	r0, [r7, #28]
        break;
 8003a28:	e009      	b.n	8003a3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2e:	61fb      	str	r3, [r7, #28]
        break;
 8003a30:	e005      	b.n	8003a3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80fd 	beq.w	8003c40 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d305      	bcc.n	8003a62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d903      	bls.n	8003a6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a68:	e0ea      	b.n	8003c40 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	461c      	mov	r4, r3
 8003a70:	4615      	mov	r5, r2
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	022b      	lsls	r3, r5, #8
 8003a7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a80:	0222      	lsls	r2, r4, #8
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	6849      	ldr	r1, [r1, #4]
 8003a86:	0849      	lsrs	r1, r1, #1
 8003a88:	2000      	movs	r0, #0
 8003a8a:	4688      	mov	r8, r1
 8003a8c:	4681      	mov	r9, r0
 8003a8e:	eb12 0a08 	adds.w	sl, r2, r8
 8003a92:	eb43 0b09 	adc.w	fp, r3, r9
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aa4:	4650      	mov	r0, sl
 8003aa6:	4659      	mov	r1, fp
 8003aa8:	f7fc fb8e 	bl	80001c8 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aba:	d308      	bcc.n	8003ace <UART_SetConfig+0x3de>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac2:	d204      	bcs.n	8003ace <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	60da      	str	r2, [r3, #12]
 8003acc:	e0b8      	b.n	8003c40 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ad4:	e0b4      	b.n	8003c40 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ade:	d15f      	bne.n	8003ba0 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8003ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d828      	bhi.n	8003b3a <UART_SetConfig+0x44a>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <UART_SetConfig+0x400>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b1d 	.word	0x08003b1d
 8003af8:	08003b25 	.word	0x08003b25
 8003afc:	08003b3b 	.word	0x08003b3b
 8003b00:	08003b2b 	.word	0x08003b2b
 8003b04:	08003b3b 	.word	0x08003b3b
 8003b08:	08003b3b 	.word	0x08003b3b
 8003b0c:	08003b3b 	.word	0x08003b3b
 8003b10:	08003b33 	.word	0x08003b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b14:	f7ff f856 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003b18:	61f8      	str	r0, [r7, #28]
        break;
 8003b1a:	e014      	b.n	8003b46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b1c:	f7ff f868 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8003b20:	61f8      	str	r0, [r7, #28]
        break;
 8003b22:	e010      	b.n	8003b46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b24:	4b4e      	ldr	r3, [pc, #312]	; (8003c60 <UART_SetConfig+0x570>)
 8003b26:	61fb      	str	r3, [r7, #28]
        break;
 8003b28:	e00d      	b.n	8003b46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2a:	f7fe ffb3 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8003b2e:	61f8      	str	r0, [r7, #28]
        break;
 8003b30:	e009      	b.n	8003b46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b36:	61fb      	str	r3, [r7, #28]
        break;
 8003b38:	e005      	b.n	8003b46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d079      	beq.n	8003c40 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005a      	lsls	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	441a      	add	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b0f      	cmp	r3, #15
 8003b68:	d916      	bls.n	8003b98 <UART_SetConfig+0x4a8>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d212      	bcs.n	8003b98 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	8afb      	ldrh	r3, [r7, #22]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	8afa      	ldrh	r2, [r7, #22]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	e053      	b.n	8003c40 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b9e:	e04f      	b.n	8003c40 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d828      	bhi.n	8003bfa <UART_SetConfig+0x50a>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <UART_SetConfig+0x4c0>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003bdd 	.word	0x08003bdd
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003bfb 	.word	0x08003bfb
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003bfb 	.word	0x08003bfb
 8003bc8:	08003bfb 	.word	0x08003bfb
 8003bcc:	08003bfb 	.word	0x08003bfb
 8003bd0:	08003bf3 	.word	0x08003bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7fe fff6 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003bd8:	61f8      	str	r0, [r7, #28]
        break;
 8003bda:	e014      	b.n	8003c06 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bdc:	f7ff f808 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8003be0:	61f8      	str	r0, [r7, #28]
        break;
 8003be2:	e010      	b.n	8003c06 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be4:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <UART_SetConfig+0x570>)
 8003be6:	61fb      	str	r3, [r7, #28]
        break;
 8003be8:	e00d      	b.n	8003c06 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bea:	f7fe ff53 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8003bee:	61f8      	str	r0, [r7, #28]
        break;
 8003bf0:	e009      	b.n	8003c06 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf6:	61fb      	str	r3, [r7, #28]
        break;
 8003bf8:	e005      	b.n	8003c06 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c04:	bf00      	nop
    }

    if (pclk != 0U)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d019      	beq.n	8003c40 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	085a      	lsrs	r2, r3, #1
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	441a      	add	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b0f      	cmp	r3, #15
 8003c26:	d908      	bls.n	8003c3a <UART_SetConfig+0x54a>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2e:	d204      	bcs.n	8003c3a <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	60da      	str	r2, [r3, #12]
 8003c38:	e002      	b.n	8003c40 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3728      	adds	r7, #40	; 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40008000 	.word	0x40008000
 8003c60:	00f42400 	.word	0x00f42400

08003c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01a      	beq.n	8003d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d62:	d10a      	bne.n	8003d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003db8:	f7fc ffe0 	bl	8000d7c <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d10e      	bne.n	8003dea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f82d 	bl	8003e3a <UART_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e023      	b.n	8003e32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d10e      	bne.n	8003e16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f817 	bl	8003e3a <UART_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e00d      	b.n	8003e32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	4613      	mov	r3, r2
 8003e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	e05e      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d05a      	beq.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e54:	f7fc ff92 	bl	8000d7c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d11b      	bne.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e043      	b.n	8003f2a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02c      	beq.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ebe:	d124      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ed8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e00f      	b.n	8003f2a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4013      	ands	r3, r2
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	bf0c      	ite	eq
 8003f1a:	2301      	moveq	r3, #1
 8003f1c:	2300      	movne	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d091      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <__libc_init_array>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	4d0d      	ldr	r5, [pc, #52]	; (8003f6c <__libc_init_array+0x38>)
 8003f38:	4c0d      	ldr	r4, [pc, #52]	; (8003f70 <__libc_init_array+0x3c>)
 8003f3a:	1b64      	subs	r4, r4, r5
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	2600      	movs	r6, #0
 8003f40:	42a6      	cmp	r6, r4
 8003f42:	d109      	bne.n	8003f58 <__libc_init_array+0x24>
 8003f44:	4d0b      	ldr	r5, [pc, #44]	; (8003f74 <__libc_init_array+0x40>)
 8003f46:	4c0c      	ldr	r4, [pc, #48]	; (8003f78 <__libc_init_array+0x44>)
 8003f48:	f000 f820 	bl	8003f8c <_init>
 8003f4c:	1b64      	subs	r4, r4, r5
 8003f4e:	10a4      	asrs	r4, r4, #2
 8003f50:	2600      	movs	r6, #0
 8003f52:	42a6      	cmp	r6, r4
 8003f54:	d105      	bne.n	8003f62 <__libc_init_array+0x2e>
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5c:	4798      	blx	r3
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7ee      	b.n	8003f40 <__libc_init_array+0xc>
 8003f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f66:	4798      	blx	r3
 8003f68:	3601      	adds	r6, #1
 8003f6a:	e7f2      	b.n	8003f52 <__libc_init_array+0x1e>
 8003f6c:	08003ff4 	.word	0x08003ff4
 8003f70:	08003ff4 	.word	0x08003ff4
 8003f74:	08003ff4 	.word	0x08003ff4
 8003f78:	08003ff8 	.word	0x08003ff8

08003f7c <memset>:
 8003f7c:	4402      	add	r2, r0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d100      	bne.n	8003f86 <memset+0xa>
 8003f84:	4770      	bx	lr
 8003f86:	f803 1b01 	strb.w	r1, [r3], #1
 8003f8a:	e7f9      	b.n	8003f80 <memset+0x4>

08003f8c <_init>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	bf00      	nop
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr

08003f98 <_fini>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr
